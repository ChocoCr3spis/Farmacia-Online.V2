import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { lastValueFrom } from 'rxjs';
import { environment } from '@environments/environment';
import { BehaviorSubject } from 'rxjs';
import { CartItem } from '@models/cart-item';

@Injectable({ providedIn: 'root' })
export class CartService {
  private apiUrl = `${environment.apiUrl}/cart`;
  private cartSubject = new BehaviorSubject<CartItem[]>([]);

  constructor(private http: HttpClient) {
    this.loadFromServer();
  }

  getCart$() {
    return this.cartSubject.asObservable();
  }

  private async loadFromServer() {
    const items = await lastValueFrom(
      this.http.get<CartItem[]>(this.apiUrl, { withCredentials: true })
    );
    this.cartSubject.next(items);
  }

  async addToCart(item: CartItem) {
    await lastValueFrom(
      this.http.post<CartItem>(this.apiUrl, item, { withCredentials: true })
    );
    await this.loadFromServer();
  }

  async updateQuantity(id: number | string, quantity: number) {
    await lastValueFrom(
      this.http.put(
        `${this.apiUrl}/${id}`,
        { quantity },
        { withCredentials: true }
      )
    );
    await this.loadFromServer();
  }

  async removeFromCart(id: number | string) {
    await lastValueFrom(
      this.http.delete(`${this.apiUrl}/${id}`, { withCredentials: true })
    );
    await this.loadFromServer();
  }

  async clearCart() {
    const items = this.cartSubject.value;
    for (const item of items) {
      await this.removeFromCart(item.product.id);
    }
  }
}
